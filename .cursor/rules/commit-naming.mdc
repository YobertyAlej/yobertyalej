---
description: Reglas para versionamiento semántico y mensajes de commit
globs: ["*.ts", "*.tsx", "*.js", "*.jsx", "*.md", "*.css", "*.scss"]
alwaysApply: true
---
# Reglas de Versionamiento Semántico para Portfolio Iterativo con JIRA

## Estructura de Commit

Todos los mensajes de commit deben seguir el formato que incluye la referencia a JIRA:

´´´
YA-<número>: <tipo>(<ámbito>): <descripción corta>
[cuerpo opcional con más detalles]
[notas de pie opcionales]
´´´

Donde YA-<número> es el identificador del ticket de JIRA (ej: YA-5, YA-11).

## Tipos de Commit

- **feat**: Nueva funcionalidad
- **fix**: Corrección de error
- **docs**: Cambios en documentación
- **style**: Cambios de formato, espaciado, etc. (no afectan código)
- **refactor**: Refactorización de código existente
- **perf**: Mejoras de rendimiento
- **test**: Añadir o corregir tests
- **chore**: Tareas de mantenimiento, gestión de paquetes
- **i18n**: Relacionado con internacionalización
- **ai**: Componentes relacionados con IA
- **exp**: Implementaciones experimentales e iterativas

## Ámbitos Específicos

- **core**: Componentes fundamentales del portfolio
- **blog**: Sistema de blog
- **ui**: Interfaz de usuario y componentes
- **three**: Visualizaciones 3D
- **playground**: AI Playground
- **i18n**: Sistema de internacionalización

## Versionamiento Semántico

Seguir los estándares SemVer X.Y.Z-[pre-release]+[metadata]:
- MAJOR (X): Cambios que transforman arquitectura o experiencia
- MINOR (Y): Nuevas funcionalidades manteniendo compatibilidad
- PATCH (Z): Correcciones y mejoras incrementales
- Usar pre-release (alpha/beta/rc) para trabajo experimental

## Ejemplos

✅ `YA-1 - feat(playground): añadir primera demo de IA conversacional`
✅ `YA-6 - fix(i18n): corregir detección automática de idioma`
✅ `YA-8 - exp(three): implementar visualización 3D experimental para portfolio`
✅ `YA-2 - chore(deps): actualizar dependencias de Next.js a v14`
✅ `YA-4 - refactor(blog): migrar sistema de gestión de contenido`

## Nomenclatura de Ramas con JIRA

Para desarrollar un ticket de JIRA, crea una rama con el formato:

´´´
feature/YA-<número>/breve-descripción
´´´

Por ejemplo:
- `feature/YA-5/configuracion-nextjs-typescript`
- `feature/YA-6/implementacion-tailwind`
- `fix/YA-10/corregir-modo-oscuro`

## Integración con JIRA

Al incluir la clave del ticket (YA-<número>) en los commits y nombres de ramas, JIRA:
- Vinculará automáticamente los commits al ticket correspondiente
- Mostrará el historial de desarrollo en el panel "Desarrollo" del ticket
- Permitirá seguir el progreso del desarrollo desde la interfaz de JIRA